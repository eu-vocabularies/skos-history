PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX delta: <http://www.w3.org/2004/delta#>
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>
#
# version deltas for a single concept
#
# TODO: remove empty blank nodes (see
# http://answers.semanticweb.com/questions/20908/sparql-construct-without-distinct-produces-non-lean-output)
CONSTRUCT {
  ?concept sh:conceptHistory ?conceptDelta .
  ?conceptDelta a sh:ConceptDelta ;
    dcterms:isPartOf ?delta ;
    delta:deletion [ ?predicate ?deletion ] ;
    delta:insertion [ ?predicate ?insertion ] .
}
WHERE {
  # parameters
  VALUES ( ?versionHistoryGraph ?concept ) {
    ( <http://zbw.eu/stw/version> <http://zbw.eu/stw/descriptor/10112-4> )
  }
  # alternate examples:
  #   newly introduced thsys "B.04.02.01 Recruitment": <http://zbw.eu/stw/thsys/180783>
  #   changes in "Welfare analyis": <http://zbw.eu/stw/descriptor/10112-4>
  #   complete lifecycle of "Virtual community": <http://zbw.eu/stw/descriptor/27212-1>
  GRAPH ?versionHistoryGraph {
    # use subquery to filter out duplicates
    SELECT DISTINCT ?delta ?concept ?conceptDelta ?predicate ?deletion ?insertion
    WHERE {
      # get deltas of consecutive versions
      ?vhr a dsv:VersionHistoryRecord ;
        sh:hasDelta ?delta ;
        xhv:prev ?vhrPrev .
      ?delta sh:deltaTo ?vhr ;
        sh:deltaFrom ?vhrPrev .
      # identify insertions and deletions parts/graphs
      ?delta dcterms:hasPart ?insertions .
      ?insertions a sh:SchemeDeltaInsertions ;
        sh:usingNamedGraph/sd:name ?insertionsGraph .
      ?delta dcterms:hasPart ?deletions .
      ?deletions a sh:SchemeDeltaDeletions ;
        sh:usingNamedGraph/sd:name ?deletionsGraph .
      #
      # for each version, work on insertions and deletions part
      {
        GRAPH ?deletionsGraph {
          ?concept ?predicate ?deletion .
        }
      } UNION {
        GRAPH ?insertionsGraph {
          ?concept ?predicate ?insertion .
        }
      }
      # for the clarity of the example, filter out some dataset-wide changes in STW
      FILTER ( ?predicate NOT IN (<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>, <http://purl.org/ontology/gbv/gvkppn>) )
      # build a uri to group the changes for a particular version
      # the general expression:
      #BIND (uri(concat(str(?concept), '/version', strafter(str(?delta), str(?versionHistoryGraph)))) AS ?conceptDelta)
      # does not work, so q+d we use an enumeration:
      BIND (uri(concat(str(?concept), strafter(str(?delta), "/stw"), strafter(str(?delta), "onto/yso"))) AS ?conceptDelta)
    }
  }
}
