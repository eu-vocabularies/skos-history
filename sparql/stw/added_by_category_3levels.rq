PREFIX dc: <http://purl.org/dc/elements/1.1/>
PREFIX dcterms: <http://purl.org/dc/terms/>
PREFIX dsv: <http://purl.org/iso25964/DataSet/Versioning#>
PREFIX sd: <http://www.w3.org/ns/sparql-service-description#>
PREFIX sh: <http://purl.org/skos-history/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xhv: <http://www.w3.org/1999/xhtml/vocab#>
PREFIX zbwext: <http://zbw.eu/namespaces/zbw-extensions/>
#
# Identify concepts inserted with a certain version,
# ordered by the subject categories (down to the third level).
#
# Subject categories have a different concept type (subclass of
# skos:Concept) and form mono-hierarchies within STW. The top
# level subject categories are the sub-thesauri. A descriptor
# often belongs to more than one subject category.
#
SELECT DISTINCT ?topCategory (str(?topLabel) AS ?topCategoryLabel) ?secondLevelCategory (str(?secondLevelLabel) AS ?secondLevelCategoryLabel)  ?thirdLevelCategory (coalesce(str(?thirdLevelLabel), "") AS ?thirdLevelCategoryLabel) (?concept AS ?addedConcept) (str(?prefLabel) AS ?addedConceptLabel)
WHERE {
  GRAPH ?versionHistoryGraph {
    # parameters
    VALUES ( ?versionHistoryGraph ?conceptType ?oldVersion ?newVersion ?language ) {
      ( <http://zbw.eu/stw/version> zbwext:Descriptor undef undef "en" )
    }
    # get the current and the previous version as default versions
    ?versionset dsv:currentVersionRecord/xhv:prev/dc:identifier ?previousVersion .
    ?versionset dsv:currentVersionRecord/dc:identifier ?latestVersion .
    # select the versions to actually use
    BIND(coalesce(?oldVersion, ?previousVersion) AS ?oldVersionSelected)
    BIND(coalesce(?newVersion, ?latestVersion) AS ?newVersionSelected)
    # get the delta and via that the relevant graphs
    ?delta a sh:SchemeDelta ;
      sh:deltaFrom/dc:identifier ?oldVersionSelected ;
      sh:deltaTo/dc:identifier ?newVersionSelected ;
      sh:deltaFrom/sh:usingNamedGraph/sd:name ?oldVersionGraph ;
      sh:deltaTo/sh:usingNamedGraph/sd:name ?newVersionGraph ;
      dcterms:hasPart ?insertions ;
      dcterms:hasPart ?deletions .
    ?deletions a sh:SchemeDeltaDeletions ;
      sh:usingNamedGraph/sd:name ?deletionsGraph .
    ?insertions a sh:SchemeDeltaInsertions ;
      sh:usingNamedGraph/sd:name ?insertionsGraph .
  }
  # for each inserted concept, a (newly inserted) prefLabel must exist ...
  GRAPH ?insertionsGraph {
    ?concept skos:prefLabel ?prefLabel
  }
  # ... without any prefLabel deleted for this concept
  FILTER NOT EXISTS {
    GRAPH ?oldVersionGraph {
      ?concept ?p []
    }
  }
  GRAPH ?newVersionGraph {
    # get the top subject category (concept of subclass Thsys)
    # subject categories form a mono-hierarchy within STW
    ?concept skos:prefLabel ?prefLabel .
    ?concept skos:broader ?category .
    ?category a zbwext:Thsys .
    ?category skos:broader* ?topCategory .
    ?scheme skos:hasTopConcept ?topCategory .
    ?topCategory skos:prefLabel ?topLabel .
    #
    # get the second level category and it's label
    ?topCategory skos:narrower ?secondLevelCategory .
    ?category skos:broader+ ?secondLevelCategory .
    ?secondLevelCategory skos:prefLabel ?secondLevelLabel .
    #
    # get the third level category and it's label
    OPTIONAL {
      ?secondLevelCategory skos:narrower ?thirdLevelCategory .
      ?category skos:broader+ ?thirdLevelCategory .
      ?thirdLevelCategory skos:prefLabel ?thirdLevelLabel .
    }
  }
  FILTER (lang(?prefLabel) = ?language && lang(?secondLevelLabel) = ?language && lang(?topLabel) = ?language)
  FILTER (!bound(?thirdLevelLabel) || lang(?thirdLevelLabel) = ?language)
}
ORDER BY ?secondLevelCategoryLabel ?thirdLevelCategoryLabel ?prefLabel
